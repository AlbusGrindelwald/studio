// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A doctor recommendation AI agent.
 *
 * - recommendDoctors - A function that handles the doctor recommendation process.
 * - RecommendDoctorsInput - The input type for the recommendDoctors function.
 * - RecommendDoctorsOutput - The return type for the recommendDoctors function.
 */

import {ai} from '@/ai/genkit';
import { googleAI } from '@genkit-ai/googleai';
import {z} from 'genkit';

const RecommendDoctorsInputSchema = z.object({
  symptoms: z
    .string()
    .describe('The symptoms that the user is experiencing.'),
});
export type RecommendDoctorsInput = z.infer<typeof RecommendDoctorsInputSchema>;

const RecommendDoctorsOutputSchema = z.object({
  doctors: z.array(
    z.object({
      name: z.string().describe('The name of the doctor.'),
      specialty: z.string().describe('The specialty of the doctor.'),
      description: z.string().describe('A short description of the doctor.'),
    })
  ).describe('A list of recommended doctors.'),
});
export type RecommendDoctorsOutput = z.infer<typeof RecommendDoctorsOutputSchema>;

export async function recommendDoctors(input: RecommendDoctorsInput): Promise<RecommendDoctorsOutput> {
  return recommendDoctorsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'recommendDoctorsPrompt',
  input: {schema: RecommendDoctorsInputSchema},
  output: {schema: RecommendDoctorsOutputSchema},
  model: googleAI.model('gemini-2.0-flash'),
  prompt: `You are an AI assistant helping users find the best doctors based on their symptoms.

  Given the following symptoms:
  {{symptoms}}

  Recommend a list of doctors that would be suitable for the user. Make sure to include the doctor's name, specialty and a short description.
  Format the output as a JSON array of doctors.
  `,
});

const recommendDoctorsFlow = ai.defineFlow(
  {
    name: 'recommendDoctorsFlow',
    inputSchema: RecommendDoctorsInputSchema,
    outputSchema: RecommendDoctorsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
