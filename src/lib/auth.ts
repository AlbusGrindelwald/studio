// This is an autogenerated file from Firebase Studio.
import {
  GoogleAuthProvider,
  signInWithPopup,
  User,
  AuthErrorCodes,
  RecaptchaVerifier,
  signInWithPhoneNumber,
  ConfirmationResult,
} from 'firebase/auth';
import { auth } from './firebase';

// Helper to get RecaptchaVerifier
const getRecaptchaVerifier = (containerId: string) => {
  if ((window as any).recaptchaVerifier) {
    return (window as any).recaptchaVerifier;
  }
  const recaptchaVerifier = new RecaptchaVerifier(auth, containerId, {
    size: 'invisible',
    callback: (response: any) => {
      // reCAPTCHA solved, allow signInWithPhoneNumber.
    },
  });
  (window as any).recaptchaVerifier = recaptchaVerifier;
  return recaptchaVerifier;
};


export const sendOtp = async (phoneNumber: string, containerId: string): Promise<ConfirmationResult> => {
  const appVerifier = getRecaptchaVerifier(containerId);
  // Firebase requires the phone number in E.164 format (e.g., +11234567890)
  const formattedPhoneNumber = `+91${phoneNumber}`;

  try {
    const confirmationResult = await signInWithPhoneNumber(auth, formattedPhoneNumber, appVerifier);
    return confirmationResult;
  } catch (error: any) {
    console.error('Error sending OTP:', error);
    if (error.code === 'auth/invalid-phone-number') {
        throw new Error('Invalid phone number provided. Please check the number and try again.');
    }
    // Reset reCAPTCHA so user can try again
    if ((window as any).recaptchaVerifier) {
        (window as any).recaptchaVerifier.render().then((widgetId: any) => {
            grecaptcha.reset(widgetId);
        });
    }
    throw new Error('Failed to send OTP. Please try again later.');
  }
};


export const verifyOtp = async (confirmationResult: ConfirmationResult, otp: string): Promise<User> => {
  try {
    const result = await confirmationResult.confirm(otp);
    return result.user;
  } catch (error) {
    console.error('Error verifying OTP:', error);
    throw new Error('Invalid OTP. Please try again.');
  }
};


export const signInWithGoogle = async (): Promise<User | null> => {
  const provider = new GoogleAuthProvider();
  provider.setCustomParameters({
    auth_domain: auth.config.authDomain,
  });

  try {
    const result = await signInWithPopup(auth, provider);
    return result.user;
  } catch (error: any) {
    if (error.code === AuthErrorCodes.POPUP_CLOSED_BY_USER || error.code === 'auth/cancelled-popup-request') {
      console.log('Sign-in popup closed or cancelled by user.');
      return null;
    }
    if (error.code === 'auth/unauthorized-domain') {
      console.error(
        'This domain is not authorized for Firebase authentication. Please add it to the list of authorized domains in the Firebase console.'
      );
      throw new Error(
        "This domain is not authorized for authentication. Please add it to the Firebase Console's authorized domains list."
      );
    }
    if (error.code === 'auth/configuration-not-found') {
      console.error(
        "Firebase sign-in configuration is missing. Please enable the Google Sign-in provider in the Firebase console's Authentication section."
      );
      throw new Error('Google Sign-in is not enabled for this project. Please enable it in the Firebase Console.');
    }
    console.error('Error signing in with Google: ', error);
    throw error;
  }
};
