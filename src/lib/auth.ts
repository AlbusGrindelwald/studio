

// This is an autogenerated file from Firebase Studio.
import {
  GoogleAuthProvider,
  signInWithPopup,
  User,
  AuthErrorCodes,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
  RecaptchaVerifier,
  signInWithPhoneNumber,
  ConfirmationResult
} from 'firebase/auth';
import { auth } from './firebase';


export const signInWithGoogle = async (): Promise<User | null> => {
  const provider = new GoogleAuthProvider();
  provider.setCustomParameters({
    auth_domain: auth.config.authDomain,
  });

  try {
    const result = await signInWithPopup(auth, provider);
    return result.user;
  } catch (error: any) {
    if (error.code === AuthErrorCodes.POPUP_CLOSED_BY_USER || error.code === 'auth/cancelled-popup-request') {
      console.log('Sign-in popup closed or cancelled by user.');
      return null;
    }
    if (error.code === 'auth/unauthorized-domain') {
      console.error(
        'This domain is not authorized for Firebase authentication. Please add it to the list of authorized domains in the Firebase console.'
      );
      throw new Error(
        "This domain is not authorized for authentication. Please add it to the Firebase Console's authorized domains list."
      );
    }
    if (error.code === 'auth/configuration-not-found') {
      console.error(
        "Firebase sign-in configuration is missing. Please enable the Google Sign-in provider in the Firebase console's Authentication section."
      );
      throw new Error('Google Sign-in is not enabled for this project. Please enable it in the Firebase Console.');
    }
    console.error('Error signing in with Google: ', error);
    throw error;
  }
};


export const createUserWithEmail = async (email: string, password_provided: string): Promise<User> => {
    try {
        const userCredential = await createUserWithEmailAndPassword(auth, email, password_provided);
        return userCredential.user;
    } catch(error: any) {
        if(error.code === 'auth/email-already-in-use') {
            throw new Error('An account with this email already exists.');
        }
        throw error;
    }
}

export const signInWithEmail = async (email: string, password_provided: string): Promise<User> => {
    try {
        const userCredential = await signInWithEmailAndPassword(auth, email, password_provided);
        return userCredential.user;
    } catch(error: any) {
        if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password' || error.code === 'auth/invalid-credential') {
            throw new Error('Invalid email or password.');
        }
        throw error;
    }
}

export const signOutUser = async (): Promise<void> => {
    await signOut(auth);
}

const setupRecaptcha = (containerId: string): RecaptchaVerifier => {
  if (typeof window === 'undefined') {
    throw new Error("reCAPTCHA can only be set up in the browser.");
  }
  // Clear any existing verifier
  if ((window as any).recaptchaVerifier) {
    (window as any).recaptchaVerifier.clear();
  }

  const recaptchaVerifier = new RecaptchaVerifier(auth, containerId, {
    size: 'invisible',
    callback: (response: any) => {
      // reCAPTCHA solved, allow signInWithPhoneNumber.
      console.log("reCAPTCHA solved");
    },
    'expired-callback': () => {
      // Response expired. Ask user to solve reCAPTCHA again.
      console.log("reCAPTCHA expired");
    }
  });

  (window as any).recaptchaVerifier = recaptchaVerifier;
  return recaptchaVerifier;
}

export const sendOtp = async (phoneNumber: string, containerId: string): Promise<ConfirmationResult> => {
  const appVerifier = setupRecaptcha(containerId);
  try {
    const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, appVerifier);
    (window as any).confirmationResult = confirmationResult;
    return confirmationResult;
  } catch (error: any) {
     if (error.code === 'auth/invalid-phone-number') {
        throw new Error('Invalid phone number provided. Please check the format.');
     }
     console.error("Error sending OTP: ", error);
     throw new Error("Failed to send OTP. Please try again.");
  }
}

export const verifyOtp = async (confirmationResult: ConfirmationResult, code: string): Promise<User> => {
    try {
        const result = await confirmationResult.confirm(code);
        return result.user;
    } catch(error: any) {
        if(error.code === 'auth/invalid-verification-code') {
            throw new Error('The verification code is invalid. Please try again.');
        }
        console.error("Error verifying OTP: ", error);
        throw new Error("Failed to verify OTP.");
    }
}
