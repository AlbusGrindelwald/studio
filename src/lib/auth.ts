
// This is an autogenerated file from Firebase Studio.
import {
  GoogleAuthProvider,
  signInWithPopup,
  User,
  AuthErrorCodes,
} from 'firebase/auth';
import { auth } from './firebase';

// Mock ConfirmationResult for the simulated OTP flow
export interface MockConfirmationResult {
  confirm: (otp: string) => Promise<{ user: User }>;
  verificationId: string;
}

// In a real app, you would use a service to send an OTP.
// For this example, we'll simulate it.
export const sendOtp = async (phoneNumber: string): Promise<MockConfirmationResult> => {
  console.log(`DEV-ONLY: OTP for ${phoneNumber} is 123456`);
  // This is a mock confirmation result.
  const mockConfirmationResult: MockConfirmationResult = {
    confirm: async (otp: string) => {
      if (otp === '123456') {
        // In a real app, you would get a real user object.
        // Here we create a mock user object.
        const mockUser = {
          uid: 'mock-user-id',
          phoneNumber: `+91${phoneNumber}`,
          displayName: 'Mock User',
        } as User;
        return Promise.resolve({ user: mockUser });
      } else {
        throw new Error('Invalid OTP. Please try again.');
      }
    },
    verificationId: 'mock-verification-id',
  };
  return Promise.resolve(mockConfirmationResult);
};

export const verifyOtp = async (
  confirmationResult: MockConfirmationResult,
  otp: string
): Promise<User> => {
  try {
    const { user } = await confirmationResult.confirm(otp);
    return user;
  } catch (error) {
    console.error('Error verifying OTP:', error);
    if (error instanceof Error) {
        throw error;
    }
    throw new Error('Invalid OTP. Please try again.');
  }
};

export const signInWithGoogle = async (): Promise<User | null> => {
  const provider = new GoogleAuthProvider();
  provider.setCustomParameters({
    auth_domain: auth.config.authDomain,
  });

  try {
    const result = await signInWithPopup(auth, provider);
    return result.user;
  } catch (error: any) {
    if (error.code === AuthErrorCodes.POPUP_CLOSED_BY_USER || error.code === 'auth/cancelled-popup-request') {
      console.log('Sign-in popup closed or cancelled by user.');
      return null;
    }
    if (error.code === 'auth/unauthorized-domain') {
      console.error(
        'This domain is not authorized for Firebase authentication. Please add it to the list of authorized domains in the Firebase console.'
      );
      throw new Error(
        "This domain is not authorized for authentication. Please add it to the Firebase Console's authorized domains list."
      );
    }
    if (error.code === 'auth/configuration-not-found') {
      console.error(
        "Firebase sign-in configuration is missing. Please enable the Google Sign-in provider in the Firebase console's Authentication section."
      );
      throw new Error('Google Sign-in is not enabled for this project. Please enable it in the Firebase Console.');
    }
    console.error('Error signing in with Google: ', error);
    throw error;
  }
};
